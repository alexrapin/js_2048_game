{"mappings":"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","sources":["src/scripts/main.js"],"sourcesContent":["/* eslint-disable object-curly-newline */\n'use strict';\n\nconst SIZE_BOARD = 4;\nlet board = [...Array(SIZE_BOARD)].map(() => Array(SIZE_BOARD).fill(0));\nlet score = 0;\nlet isWin = false;\nconst cells = document.querySelectorAll('.field-cell');\nconst startButton = document.getElementById('start-button');\nconst allowedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\nconst message = {\n  Start: document.getElementById('message-start'),\n  Lose: document.getElementById('message-lose'),\n  Win: document.getElementById('message-win'),\n};\n\nstartButton.addEventListener('click', startGame);\n\nfunction startGame() {\n  resetGame();\n  changeButton();\n  addRandomField(board);\n  addRandomField(board);\n  drawBoard(board, cells);\n}\n\nconst resetGame = () => {\n  score = 0;\n  isWin = false;\n  document.querySelector('.game-score').innerText = score;\n  board = [...Array(SIZE_BOARD)].map(() => Array(SIZE_BOARD).fill(0));\n  message.Win.classList.add('hidden');\n  message.Lose.classList.add('hidden');\n};\n\nfunction addRandomField(boardArray) {\n  const emptyCells = [];\n\n  boardArray.forEach((row, rowIndex) => {\n    row.forEach((value, colIndex) => {\n      value === 0 && emptyCells.push({ rowIndex, colIndex });\n    });\n  });\n\n  if (emptyCells.length > 0) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const randomCell = emptyCells[randomIndex];\n\n    boardArray[randomCell.rowIndex][randomCell.colIndex]\n      = Math.random() < 0.9 ? 2 : 4;\n  }\n}\n\nconst drawBoard = (boardArray, curCells) => {\n  boardArray.forEach((row, rowInd) => {\n    row.forEach((value, colInd) => {\n      const cell = curCells[rowInd * boardArray.length + colInd];\n\n      if (value > 0) {\n        cell.textContent = value;\n        cell.classList = 'field-cell' + ` field-cell--${value}`;\n      } else {\n        cell.textContent = null;\n        cell.classList = 'field-cell';\n      }\n    });\n  });\n};\n\nconst changeButton = () => {\n  startButton.classList += ' restart';\n  startButton.innerText = 'Restart';\n  startButton.style = 'border: 2px solid red; color: #776e65; outline: none;';\n  message.Start.classList.add('hidden');\n};\n\ndocument.addEventListener('keyup', e => {\n  if (!allowedKeys.includes(e.key) || isWin) {\n    return;\n  }\n\n  const prevBoard = JSON.parse(JSON.stringify(board));\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      slideLeft();\n      getWinMessage(board);\n      getLoseMessage(board);\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      getWinMessage(board);\n      getLoseMessage(board);\n      break;\n\n    case 'ArrowUp':\n      slideUp();\n      getWinMessage(board);\n      getLoseMessage(board);\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      getWinMessage(board);\n      getLoseMessage(board);\n      break;\n\n    default:\n      break;\n  }\n\n  document.querySelector('.game-score').innerText = score;\n\n  if (isMoved(prevBoard)) {\n    addRandomField(board);\n    drawBoard(board, cells);\n  }\n});\n\nconst isMoved = (prevBoard) => {\n  for (let r = 0; r < SIZE_BOARD; r++) {\n    for (let c = 0; c < SIZE_BOARD; c++) {\n      if (prevBoard[r][c] !== board[r][c]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst slideLeft = () => {\n  board = board.map(row => slide(row));\n};\n\nconst slideRight = () => {\n  board = board.map(row => slide(row.reverse()).reverse());\n};\n\nfunction slideUp() {\n  const columns = prepareColumns(board);\n\n  board = prepareColumns(columns.map(col => slide(col)));\n}\n\nfunction slideDown() {\n  let columns = prepareColumns(board);\n\n  columns = columns.map(col => slide(col.reverse()).reverse());\n\n  board = prepareColumns(columns);\n};\n\nconst deleteZeros = row => row.filter(Boolean);\n\nconst slide = row => {\n  const rowClear = deleteZeros(row);\n  let newRow = rowClear;\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n  newRow = deleteZeros(newRow);\n\n  while (newRow.length < 4) {\n    newRow.push(0);\n  }\n\n  return newRow;\n};\n\nfunction prepareColumns(boardArr) {\n  return boardArr.map((row, rowInd, rowArr) => {\n    return row.map((_, colInd) => {\n      return rowArr[colInd][rowInd];\n    });\n  });\n}\n\nconst getWinMessage = (boardArray) => {\n  boardArray.forEach(row => {\n    row.forEach(cell => {\n      if (cell >= 2048) {\n        isWin = true;\n        message.Start.classList.remove('hidden');\n      }\n    });\n  });\n};\n\nfunction getLoseMessage() {\n  if (isBoardFull() && !canMakeMove()) {\n    message.Lose.classList.remove('hidden');\n  }\n};\n\nfunction isBoardFull() {\n  return board.every(row => row.every(tile => tile !== 0));\n}\n\nfunction canMakeMove() {\n  for (let r = 0; r < SIZE_BOARD; r++) {\n    for (let c = 0; c < SIZE_BOARD; c++) {\n      const value = board[r][c];\n\n      if (value !== 0) {\n        if (r < 3 && value === board[r + 1][c]) {\n          return true;\n        };\n\n        if (c < 3 && value === board[r][c + 1]) {\n          return true;\n        };\n      }\n    }\n  }\n\n  return false;\n}\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}